"""
Django settings for webdev project - CONFIGURACIÓN CON SENDGRID

Generated by 'django-admin startproject' using Django 3.1.5.
"""
from logging.handlers import TimedRotatingFileHandler
from pathlib import Path
import os
from dotenv import load_dotenv 
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

dotenv_file = os.path.join(BASE_DIR, ".env")
if os.path.isfile(dotenv_file):
    load_dotenv(dotenv_file)
else:
    load_dotenv()

# Quick-start development settings - unsuitable for production
SECRET_KEY = os.environ['SECRET_KEY']

if not SECRET_KEY:
    raise Exception("No SECRET_KEY set in environment. Please check your .env file.")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['weaponnotificationserver.onrender.com','127.0.0.1','localhost',]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'detection',
    'alertuploadREST',
    'django_filters',
    'rest_framework.authtoken',
    'django_extensions',
    'storages',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'webdev.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'webdev.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ['DB_NAME'],
        'USER': os.environ['DB_USER'],
        'PASSWORD': os.environ['DB_PASSWORD'],
        'HOST': os.environ['DB_HOST'],
        'PORT': '5432',
        'OPTIONS': {
            'connect_timeout': 5,
            'sslmode': 'require',
            'keepalives': 1,
            'keepalives_idle': 30,
            'keepalives_interval': 10,
            'keepalives_count': 5,
        },
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'America/Guayaquil'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Logging
LOG_DIR = os.path.join(BASE_DIR, 'logs')
os.makedirs(LOG_DIR, exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# Static files
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR,'staticfiles')
STATICFILES_DIRS =[
    BASE_DIR / "static"
]
MEDIA_ROOT = 'static/images'

# Twilio configuration
TWILIO_ACCOUNT_SID = os.environ['TWILIO_ACCOUNT_SID']
TWILIO_AUTH_TOKEN = os.environ['TWILIO_AUTH_TOKEN']
TWILIO_NUMBER = os.environ['TWILIO_NUMBER'] 

# ==========================================
# ✅ SENDGRID EMAIL CONFIGURATION (NUEVO)
# ==========================================
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.sendgrid.net'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
EMAIL_HOST_USER = 'apikey'  # ⚠️ Siempre es 'apikey' para SendGrid
EMAIL_HOST_PASSWORD = os.environ.get('SENDGRID_API_KEY', '')
DEFAULT_FROM_EMAIL = os.environ.get('SENDGRID_FROM_EMAIL', 'noreply@weapondetection.com')
SERVER_EMAIL = DEFAULT_FROM_EMAIL
EMAIL_TIMEOUT = 30  # SendGrid es más rápido que Gmail

# Validación de configuración de SendGrid
SENDGRID_API_KEY = os.environ.get('SENDGRID_API_KEY')
SENDGRID_FROM_EMAIL = os.environ.get('SENDGRID_FROM_EMAIL')

if not SENDGRID_API_KEY:
    import warnings
    warnings.warn(
        "⚠️ SENDGRID_API_KEY no configurado. "
        "Los emails no se enviarán. Revisa tu archivo .env",
        RuntimeWarning
    )
    print("\n" + "="*60)
    print("❌ CONFIGURACIÓN DE SENDGRID INCOMPLETA")
    print("="*60)
    print("Necesitas agregar a tu .env:")
    print("  SENDGRID_API_KEY=tu-api-key-aqui")
    print("  SENDGRID_FROM_EMAIL=tu-email-verificado@tudominio.com")
    print("="*60 + "\n")
elif not SENDGRID_FROM_EMAIL:
    import warnings
    warnings.warn(
        "⚠️ SENDGRID_FROM_EMAIL no configurado. "
        "Usando email por defecto, pero debes verificarlo en SendGrid.",
        RuntimeWarning
    )
    print("\n⚠️ SENDGRID_FROM_EMAIL no configurado - usando default\n")
else:
    print("\n" + "="*60)
    print("✅ SENDGRID CONFIGURADO CORRECTAMENTE")
    print("="*60)
    print(f"   From Email: {SENDGRID_FROM_EMAIL}")
    print(f"   API Key: {'*' * 20}{SENDGRID_API_KEY[-8:]}")
    print(f"   SMTP Host: {EMAIL_HOST}")
    print(f"   SMTP Port: {EMAIL_PORT}")
    print("="*60 + "\n")

# Amazon S3 Configuration
AWS_ACCESS_KEY_ID = os.environ['AWS_ACCESS_KEY_ID']
AWS_SECRET_ACCESS_KEY = os.environ['AWS_SECRET_ACCESS_KEY']
AWS_STORAGE_BUCKET_NAME = 'weapondetectionsystem'
AWS_S3_REGION_NAME = 'us-east-1'
AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com'
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}
AWS_S3_SIGNATURE_VERSION = 's3v4'
AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL=None

# Media files configuration
PUBLIC_MEDIA_LOCATION = 'media'
MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{PUBLIC_MEDIA_LOCATION}/'
DEFAULT_FILE_STORAGE = 'webdev.storage_backends.PublicMediaStorage'